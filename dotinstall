#! /usr/bin/env bash


## pre-installation checks
if [ "$USER" == root ]; then
    echo
    echo "'arch_install' should NOT be run as root, nor should it be run with sudo."
    echo "this script should be run [normally] by a user with sudo privileges."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "'arch_install' should NOT be sourced."
    exit 1
fi


## Parse arguments
#-------------------------------------------------------------------------------

[ ! -z "$2" ] && >&2 echo usage: arch_install [--force] && exit 1
[ ! -z "$1" ] && [  "$1" = "--force" ] && FORCE=1 || FORCE=0


## Logging
#-------------------------------------------------------------------------------

mkdir -p $HOME/.local/share
LOG="$HOME/.local/share/debian_install.log"
ERR="$HOME/.local/share/debian_install_errors.log"
printf "DEBIAN PACKAGE INSTALL\n\n\n" > $LOG
printf "DEBIAN PACKAGE INSTALL\n\n\n" > $ERR


## User input
#-------------------------------------------------------------------------------

# Ask for password, this will be used for all the sudo calls.:
# and to change the shell later on.
read -s -p "[sudo] password for $USER: " password
echo $password | sudo -S echo '' 2>/dev/null
if [ $? -ne 0 ]; then
    printf "\nIncorrect sudo password. Script ended prematurely.\n\nPlease start over.\n\n"
    exit 1
fi


## Update
#-------------------------------------------------------------------------------

## Update arch
printf "\n\nUpdating...\n\n"
printf "\n\nUpdating...\n\n" >> $LOG
printf "\n\nUpdating...\n\n" >> $ERR
echo $password | sudo -S apt update -y >> $LOG 2>> $ERR
echo $password | sudo -S apt upgrade -y >> $LOG 2>> $ERR


## Custom installation functions
#-------------------------------------------------------------------------------

apt_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    # check if package is already installed...
    dpkg -l $1 >> $LOG 2>> $ERR;
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 1
    fi

    printf "sudo apt install -y $1\n" >> $LOG
    printf "sudo apt install -y $2\n" >> $ERR
    echo $password | sudo -S apt install -y $1 >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

link() {
    [ ! -z $3 ] && printf "link: too many arguments" && return 1
    printf "link $1 to $2... "
    printf "\n\n\nlink $1 to $2\n" >> $LOG
    printf "\n\n\nlink $1 to $2\n" >> $ERR
    printf "sudo ln -sf $1 $2\n" >> $LOG
    printf "sudo ln -sf $1 $2\n" >> $ERR
    [ -f "$2" ] && echo $password | sudo -S mv $2 $2.bak  >> $LOG 2>> $ERR
    echo $password | sudo -S ln -sf $1 $2  >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

## Install and configure packages
#-------------------------------------------------------------------------------

## build tools
apt_install git
apt_install make
# apt_install build-essential

## Terminal
# search tool
# apt_install grep
# alternative search tool
# apt_install ripgrep
# alternative search tool
# apt_install ack
# fuzzy finder tool
# apt_install fzf

## zsh: another alternative shell. In contrast to fish, it is posix compliant + extras
## it's my preferred shell.
apt_install zsh
## make zsh the default shell:
echo $password | chsh -s /usr/bin/zsh >> "$LOG" 2>> "$ERR"

## autojump extension for bash/zsh/fish
mkdir -p $HOME/.cache
rm -rf $HOME/.cache/autojump
git clone https://github.com/wting/autojump $HOME/.cache/autojump 2>> "$LOG" >> "$ERR"
cd $HOME/.cache/autojump 2>> "$LOG" >> "$ERR"
python install.py -d $HOME/.config/autojump 2>> "$LOG" >> "$ERR"
sed -i 's|#!/usr/bin/env python|#!/usr/bin/python|' $HOME/.config/autojump/bin/autojump >> "$LOG" 2>> "$ERR"
ln -sf $HOME/.config/autojump/bin/autojump $HOME/.local/bin

## stderred extension for bash/zsh: show stderr messages in red:
rm -rf $HOME/.config/stderred
git clone https://github.com/sickill/stderred $HOME/.config/stderred 2>> "$LOG" >> "$ERR"
cd $HOME/.config/stderred 2>> "$LOG" >> "$ERR"
make 2>> "$LOG" >> "$ERR"

## fish-like autosuggestions for zsh:
rm -rf $HOME/.config/zsh/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.config/zsh/zsh-autosuggestions 2>> "$LOG" >> "$ERR"

## syntax highlighting for zsh:
rm -rf $HOME/.config/zsh/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting $HOME/.config/zsh/zsh-syntax-highlighting 2>> "$LOG" >> "$ERR"
